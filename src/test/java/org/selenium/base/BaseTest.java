package org.selenium.base;import org.apache.commons.io.FileUtils;import org.openqa.selenium.OutputType;import org.openqa.selenium.TakesScreenshot;import org.openqa.selenium.WebDriver;import org.selenium.driver.DriverManager;import org.selenium.driver.DriverManagerFactory;import org.selenium.enums.DriverType;//import org.testng.ITestResult;import org.selenium.listeners.ListenerClass;import org.testng.ITestResult;import org.testng.annotations.*;import java.io.File;import java.io.IOException;import java.util.Date;import static org.selenium.driver.DriverManager.getDriver;@Listeners({        //AnnotationTransformer.class,        ListenerClass.class,        //MethodInterceptor.class})public class BaseTest {    String browser = null;    protected WebDriver getdr(){        return DriverManager.getDriver();    }    private void setDriver(WebDriver driver){        DriverManager.setDriver(driver);    }    @BeforeClass  //if tstNG.xml use @BeforeSuit    public void beforeclass(){        //DOMConfigurator.configure("Log4j2.xml");        //System.setProperty("log4j.configurationFile", "./resources/log4j2.properties");    }    public String setBrowserValue(String browser){        if(browser==null){          browser = "CHROME";        }        //reading brower value from TestNG        browser = System.getProperty("browser",browser);        return browser;    }    @Parameters("browser") //to get browser vlaue from TestNG    @BeforeMethodpublic synchronized void startDriver(@Optional String browser){        browser = setBrowserValue(browser);        //DriverManagerFactory DMF = DriverManagerFactory();        //DMF.getManager(); for memory management we do not create create object since getManger is static method        setDriver(DriverManagerFactory.getManager(DriverType.valueOf(browser)).createDriver());        System.out.println("Current Thread info = " + Thread.currentThread().getId() + ", Driver = " + getDriver());    }    //@Parameters("browser") - since browser var at class lever, we do not read from testNG again, else we need to read from testNG and pass as paramenter to the method    @AfterMethod    public synchronized void quitdriver(ITestResult result) throws IOException {        takeScreenshotOnTestFailure(browser, result);        getdr().quit();    }    private void takeScreenshotOnTestFailure(String browser, ITestResult result) throws IOException {        browser = setBrowserValue(browser);        System.out.println("Current Thread info = " + Thread.currentThread().getId() + ", Driver = " + getDriver());        if (result.getStatus() == ITestResult.FAILURE) {            File destFile = new File("Screenshots" + File.separator + browser + File.separator                    + result.getTestClass().getRealClass().getSimpleName() + "_" + result.getMethod().getMethodName()                    + ".png");            takeScreenshot(destFile);            // takeScreenshotUsingAshot(destFile);        }    }    private void takeScreenshot(File destFile) throws IOException {        File srcFile = ((TakesScreenshot) getDriver()).getScreenshotAs(OutputType.FILE);        FileUtils.copyFile(srcFile, destFile);    }    }   /* @Parameter("browser")    @BeforeMethod    public synchronized void startDriver(@Optional String browser){        browser = setBrowserValue(browser);        //createdriver    }}*/    /*     * @Optional -> You can run the test case individually directly from Java class     *@Parameters("browser")    @BeforeMethod    public synchronized void startDriver(@Optional String browser) {        browser = setBrowserValue(browser);        setDriver(DriverManagerFactory.getManager(DriverType.valueOf(browser)).createDriver());        System.out.println("Current Thread info = " + Thread.currentThread().getId() + ", Driver = " + getDriver());    }//how to select value from property file/* to read value from property filepublic class ConfigurationReader {	private static Properties properties;    static {        try {          String path = System.getProperty("user.dir")+"\\configuration.properties";          System.out.println("property file path"+path);          File file= new File(path);            FileInputStream input = new FileInputStream(file);            properties = new Properties();            properties.load(input);        } catch (Exception e) {            e.printStackTrace();        }    } */